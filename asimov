#!/usr/bin/env bash
set -Eeu -o pipefail

# Look through the local filesystem and exclude development dependencies
# from Apple Time Machine backups.
#
# Since these files can be restored easily via their respective installation
# tools, there's no reason to waste time/bandwidth on backing them up.
#
# To retrieve a full list of excluded files, you may run:
#
#   sudo mdfind "com_apple_backup_excludeItem = 'com.apple.backupd'"
#
# For a full explanation, please see https://apple.stackexchange.com/a/25833/206772
#
# @version 0.2.0
# @author  Steve Grunwell
# @license MIT

readonly ASIMOV_ROOT=~

# Paths to unconditionally skip over. This prevents Asimov from modifying the
# Time Machine exclusions for these paths (and decendents). It has an important
# side-effect of speeding up the search.
readonly ASIMOV_SKIP_PATHS=(
    ~/Library
)

# A list of "directory"/"sentinel" pairs.
# Each directory will be excluded from backup iff the sentinel file exists
# alongside.
#
# For example, 'node_modules package.json' means "exclude node_modules/ from
# backup if there is a package.json next to it."
readonly ASIMOV_VENDOR_DIR_SENTINELS=(
    "vendor ../composer.json"
    "node_modules ../package.json"
    ".vagrant ../Vagrantfile"
    "bower_components ../bower.json"
    "target ../pom.xml"
    ".stack-work ../stack.yaml"
    "Carthage ../Cartfile"
    "Pods ../Podfile"
    ".build ../Package.swift"
)

# Given a directory path, determine if the corresponding file (relative
# to that directory) is available.
#
# For example, when looking at a /vendor directory, we may choose to
# ensure a composer.json file is available.
dependency_file_exists() {
    local path
    read -r path;

    while read -r path; do
        safe_filepath_suffix=$(md5 -qs "$(basename "${path}")")
        filename="filepath_${safe_filepath_suffix}"
        if [ -f "${path}/${!filename}" ]; then
            echo "${path}"
        fi
    done
}

# Exclude the given paths from Time Machine backups.
# Reads the newline-separated list of paths from stdin.
exclude_file() {
    local path
    while IFS=$'\n' read -r path; do
        if tmutil isexcluded "${path}" | grep -Fq '[Excluded]'; then
            echo "- ${path} is already excluded, skipping."
            continue
        fi

        tmutil addexclusion "${path}"

        sizeondisk=$(du -hs "${path}" | cut -f1)
        echo "- ${path} has been excluded from Time Machine backups (${sizeondisk})."
    done
}

# Start to construct the `find` parameter arguments, based on an initial directory.
declare -a find_parameters=("${ASIMOV_ROOT}")

# Iterate over the skip directories to construct the `find` expression.
for d in "${ASIMOV_SKIP_PATHS[@]}"; do
    find_parameters+=( -not \( -path "${d}" -prune \) )
done

# Iterate over dependencies.
declare n=0
for i in "${ASIMOV_VENDOR_DIR_SENTINELS[@]}"; do
    read -ra parts <<< "${i}"

    # Add this folder to the `find` list, allowing a single `find` command to find all
    if [ "$n" -gt "0" ]; then
        find_parameters+=(-o)
    fi
    find_parameters+=(-name "${parts[0]}" -type d -prune)

    # Set up a variable for lookup in dependency_file_exists, using a hashed name
    # to ensure the variable name is valid
    safe_filepath="filepath_$(md5 -qs "${parts[0]}")"
    declare "${safe_filepath}"="${parts[1]}"

    ((n++))
done

printf '\n\033[0;36mFinding dependency directories with corresponding definition filesâ€¦\033[0m\n'

find "${find_parameters[@]}" | dependency_file_exists | exclude_file
